{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/react-todo-student-starter/src/components/ToDoListe.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Aufgabe from \"./Aufgabe\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoListe = () => {\n  _s();\n\n  const [userInput, setUserInput] = useState('');\n\n  const handleChange = e => {\n    setUserInput(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addTask(userInput);\n    setUserInput('');\n  };\n\n  const addTask = userInput => {\n    let copy = [...aufgaben];\n    copy = [...copy, {\n      id: aufgaben.length + 1,\n      task: userInput,\n      done: false\n    }];\n    setAufgaben(copy);\n  };\n\n  const [aufgaben, setAufgaben] = useState([{\n    text: \"Einkaufen gehen\",\n    done: false,\n    id: 1,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Eis essen\",\n    done: false,\n    id: 2,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Spielen\",\n    done: false,\n    id: 3,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Schlafen\",\n    done: false,\n    id: 4,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Programmieren\",\n    done: true,\n    id: 5,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Aufstehen\",\n    done: false,\n    id: 6\n  }]); // Funktion um done von false auf true zu ändern:\n  // braucht das Id von Aufgabe\n\n  const aufgabeAlsErledigtMarkieren = id => {\n    // kopie von aufgaben, hier ändern wir\n    let geänderteKopie = aufgaben.map(aufgabe => {\n      // // das element auf dem wir geklickt haben finden!\n      if (aufgabe.id === id) {\n        // done von false zu true\n        aufgabe.done = !aufgabe.done;\n        return aufgabe;\n      } else {\n        return aufgabe;\n      }\n    }); // setAufgaben, um die neue Array in state zu speichern:\n\n    setAufgaben(geänderteKopie);\n  }; // filter funktionen:\n\n\n  let nichtErledigteAufgaben = aufgaben.filter(aufgabe => !aufgabe.done);\n  let erledigteAufgaben = aufgaben.filter(aufgabe => aufgabe.done === true);\n\n  function handleRemove(id) {\n    let newAufgaben = aufgaben.filter(item => item.id !== id);\n    setAufgaben(newAufgaben);\n  }\n\n  function handleZuruckAlle() {\n    let newAufgaben = aufgaben.map(item => {\n      item.done = false;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleErledigenAlle() {\n    let newAufgaben = aufgaben.map(item => {\n      item.done = true;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleLoeschAlle() {\n    setAufgaben([]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ToDoListe\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Das sind meine Aufgaben:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleErledigenAlle,\n        children: \"Alle erledigen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZuruckAlle,\n        children: \"Alle zur\\xFCcksetzen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoeschAlle,\n        children: \"Alle l\\xF6schen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nichtErledigteAufgaben.map(aufgabe => {\n        return /*#__PURE__*/_jsxDEV(Aufgabe, {\n          text: aufgabe.text,\n          handleRemove: handleRemove,\n          number: aufgabe.id // Schritt 3: onClick um als erledigt zu markieren\n          ,\n          aufgabeAlsErledigtMarkieren: aufgabeAlsErledigtMarkieren,\n          farbe: aufgabe.farbe,\n          done: aufgabe.done\n        }, aufgabe.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Das habe ich schon erledigt:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), erledigteAufgaben.map(aufgabe => {\n      return /*#__PURE__*/_jsxDEV(Aufgabe, {\n        text: aufgabe.text,\n        number: aufgabe.id // Schritt 3: onClick um als erledigt zu markieren\n        ,\n        aufgabeAlsErledigtMarkieren: aufgabeAlsErledigtMarkieren,\n        farbe: aufgabe.farbe,\n        done: aufgabe.done\n      }, aufgabe.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: userInput,\n        type: \"text\",\n        onChange: handleChange,\n        placeholder: \"Enter task...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"ADD-AUFGABE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToDoListe, \"v3VXhEPFdExWtX27Dj0XlvtL5/Y=\");\n\n_c = ToDoListe;\nexport default ToDoListe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListe\");","map":{"version":3,"names":["useState","Aufgabe","ToDoListe","userInput","setUserInput","handleChange","e","currentTarget","value","handleSubmit","preventDefault","addTask","copy","aufgaben","id","length","task","done","setAufgaben","text","farbe","aufgabeAlsErledigtMarkieren","geänderteKopie","map","aufgabe","nichtErledigteAufgaben","filter","erledigteAufgaben","handleRemove","newAufgaben","item","handleZuruckAlle","handleErledigenAlle","handleLoeschAlle"],"sources":["/home/user/Desktop/react-todo-student-starter/src/components/ToDoListe.js"],"sourcesContent":["import { useState } from \"react\";\nimport Aufgabe from \"./Aufgabe\";\n\nconst ToDoListe = () => {\n  const [ userInput, setUserInput ] = useState('');\n  const handleChange = (e) => {\n    setUserInput(e.currentTarget.value)\n}\n\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  addTask(userInput);\n  setUserInput('');\n\n}\n\nconst addTask = (userInput) => {\n  let copy = [...aufgaben];\n  copy = [...copy, { id: aufgaben.length + 1, task: userInput, done: false }];\n  setAufgaben(copy);\n}\n  const [aufgaben, setAufgaben] = useState([\n    { text: \"Einkaufen gehen\", done: false, id: 1, farbe: \"schwarz\" },\n    { text: \"Eis essen\", done: false, id: 2, farbe: \"schwarz\" },\n    { text: \"Spielen\", done: false, id: 3, farbe: \"schwarz\" },\n    { text: \"Schlafen\", done: false, id: 4, farbe: \"schwarz\" },\n    { text: \"Programmieren\", done: true, id: 5, farbe: \"schwarz\" },\n    { text: \"Aufstehen\", done: false, id: 6 },\n  ]);\n  // Funktion um done von false auf true zu ändern:\n  // braucht das Id von Aufgabe\n  const aufgabeAlsErledigtMarkieren = (id) => {\n    // kopie von aufgaben, hier ändern wir\n    let geänderteKopie = aufgaben.map((aufgabe) => {\n      // // das element auf dem wir geklickt haben finden!\n      if (aufgabe.id === id) {\n        // done von false zu true\n        aufgabe.done = !aufgabe.done;\n        return aufgabe;\n      } else {\n        return aufgabe;\n      }\n    });\n    // setAufgaben, um die neue Array in state zu speichern:\n    setAufgaben(geänderteKopie);\n  };\n\n  // filter funktionen:\n\n  let nichtErledigteAufgaben = aufgaben.filter((aufgabe) => !aufgabe.done);\n  let erledigteAufgaben = aufgaben.filter((aufgabe) => aufgabe.done === true);\n\n  function handleRemove(id) {\n    let newAufgaben = aufgaben.filter((item) => item.id !== id);\n    setAufgaben(newAufgaben);\n  }\n\n  function handleZuruckAlle() {\n    let newAufgaben = aufgaben.map((item) => {\n      item.done = false;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleErledigenAlle() {\n    let newAufgaben = aufgaben.map((item) => {\n      item.done = true;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleLoeschAlle() {\n    setAufgaben([]);\n  }\n\n  return (\n    <div className=\"ToDoListe\">\n      <h2>Das sind meine Aufgaben:</h2>\n      <div>\n        <button onClick={handleErledigenAlle}>Alle erledigen</button>\n        <button onClick={handleZuruckAlle}>Alle zurücksetzen</button>\n        <button onClick={handleLoeschAlle}>Alle löschen</button>\n      </div>\n      <ul>\n        {/* Schritt 2: nur nicht erledigte aufgaben anzeigen */}\n        {nichtErledigteAufgaben.map((aufgabe) => {\n          return (\n            <Aufgabe\n              text={aufgabe.text}\n              key={aufgabe.id}\n              handleRemove={handleRemove}\n              number={aufgabe.id}\n              // Schritt 3: onClick um als erledigt zu markieren\n              aufgabeAlsErledigtMarkieren={aufgabeAlsErledigtMarkieren}\n              farbe={aufgabe.farbe}\n              done={aufgabe.done}\n            />\n          );\n        })}\n      </ul>\n      <h2>Das habe ich schon erledigt:</h2>\n      {/* Schritt 1: nur erledigte aufgaben anzeigen; Ausfilter wo done == true */}\n      {/*Geht auch: { aufgaben.filter((aufgabe) => aufgabe.done )} */}\n      {/* [{ text: \"Programmieren\", done: true, id: 5, farbe: 'blau' }] */}\n      {erledigteAufgaben.map((aufgabe) => {\n        return (\n          <Aufgabe\n            text={aufgabe.text}\n            key={aufgabe.id}\n            number={aufgabe.id}\n            // Schritt 3: onClick um als erledigt zu markieren\n            aufgabeAlsErledigtMarkieren={aufgabeAlsErledigtMarkieren}\n            farbe={aufgabe.farbe}\n            done={aufgabe.done}\n          />\n        );\n      })}\n   <form onSubmit={handleSubmit}>\n \n  \n    <input value={userInput} type=\"text\" onChange={handleChange} placeholder=\"Enter task...\" />\n  <button type=\"submit\" >ADD-AUFGABE</button>\n</form>\n\n      {/* Schritt 4: aufräumen mit Container? */}\n    </div>\n  );\n};\n\nexport default ToDoListe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}