{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/react-todo-student-starter/src/components/ToDoListe.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Aufgabe from './Aufgabe';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoListe = () => {\n  _s();\n\n  const [aufgaben, setAufgaben] = useState([{\n    text: \"Einkaufen gehen\",\n    done: false,\n    id: 1,\n    farbe: 'schwarz'\n  }, {\n    text: \"Eis essen\",\n    done: false,\n    id: 2,\n    farbe: 'schwarz'\n  }, {\n    text: \"Spielen\",\n    done: false,\n    id: 3,\n    farbe: 'schwarz'\n  }, {\n    text: \"Schlafen\",\n    done: false,\n    id: 4,\n    farbe: 'schwarz'\n  }, {\n    text: \"Programmieren\",\n    done: true,\n    id: 5,\n    farbe: 'schwarz'\n  }, {\n    text: \"Aufstehen\",\n    done: false,\n    id: 6\n  }]); // Funktion um done von false auf true zu ändern: \n  // braucht das Id von Aufgabe\n\n  const aufgabeAlsErledigtMarkieren = id => {\n    // kopie von aufgaben, hier ändern wir\n    let geänderteKopie = aufgaben.map(aufgabe => {\n      // // das element auf dem wir geklickt haben finden!\n      if (aufgabe.id === id) {\n        // done von false zu true\n        aufgabe.done = true;\n        return aufgabe;\n      } else {\n        return aufgabe;\n      }\n    }); // setAufgaben, um die neue Array in state zu speichern:\n\n    setAufgaben(geänderteKopie);\n  }; // filter funktionen: \n\n\n  let nichtErledigteAufgaben = aufgaben.filter(aufgabe => !aufgabe.done);\n  let erledigteAufgaben = aufgaben.filter(aufgabe => aufgabe.done === true);\n\n  function handleRemove(id) {\n    const newList = auf.filter(item => item.id !== id);\n    setAufgaben(newList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ToDoListe\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Das sind meine Aufgaben:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nichtErledigteAufgaben.map(aufgabe => {\n        return /*#__PURE__*/_jsxDEV(Aufgabe, {\n          text: aufgabe.text,\n          number: aufgabe.id // Schritt 3: onClick um als erledigt zu markieren\n          ,\n          aufgabeAlsErledigtMarkieren: aufgabeAlsErledigtMarkieren,\n          farbe: aufgabe.farbe,\n          done: aufgabe.done\n        }, aufgabe.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Das habe ich schon erledigt:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), erledigteAufgaben.map(aufgabe => {\n      return /*#__PURE__*/_jsxDEV(Aufgabe, {\n        text: aufgabe.text,\n        number: aufgabe.id // Schritt 3: onClick um als erledigt zu markieren\n        ,\n        aufgabeAlsErledigtMarkieren: aufgabeAlsErledigtMarkieren,\n        farbe: aufgabe.farbe,\n        done: aufgabe.done\n      }, aufgabe.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToDoListe, \"W2Lqo4wSAHJFAnK9vbyQC7y5ZHA=\");\n\n_c = ToDoListe;\nexport default ToDoListe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListe\");","map":{"version":3,"names":["useState","Aufgabe","ToDoListe","aufgaben","setAufgaben","text","done","id","farbe","aufgabeAlsErledigtMarkieren","geänderteKopie","map","aufgabe","nichtErledigteAufgaben","filter","erledigteAufgaben","handleRemove","newList","auf","item"],"sources":["/home/user/Desktop/react-todo-student-starter/src/components/ToDoListe.js"],"sourcesContent":["import { useState } from 'react'\nimport Aufgabe from './Aufgabe';\n\nconst ToDoListe = () => {\n\n  const [aufgaben, setAufgaben] = useState([\n    { text: \"Einkaufen gehen\", done: false, id: 1, farbe: 'schwarz' },\n    { text: \"Eis essen\", done: false, id: 2, farbe: 'schwarz' },\n    { text: \"Spielen\", done: false, id: 3, farbe:  'schwarz'  },\n    { text: \"Schlafen\", done: false, id: 4, farbe:  'schwarz'  },\n    { text: \"Programmieren\", done: true, id: 5, farbe:  'schwarz'  },\n    { text: \"Aufstehen\", done: false, id: 6 },\n  ])\n  // Funktion um done von false auf true zu ändern: \n  // braucht das Id von Aufgabe\n  const aufgabeAlsErledigtMarkieren = (id) => {\n    // kopie von aufgaben, hier ändern wir\n    let geänderteKopie = aufgaben.map(aufgabe => {\n      // // das element auf dem wir geklickt haben finden!\n      if(aufgabe.id === id){\n         // done von false zu true\n         aufgabe.done = true\n        return aufgabe\n      } else {\n        return aufgabe\n      }\n    })\n    // setAufgaben, um die neue Array in state zu speichern:\n    setAufgaben(geänderteKopie)\n  }\n\n  // filter funktionen: \n\n  let nichtErledigteAufgaben = aufgaben.filter((aufgabe) => !aufgabe.done)\n  let erledigteAufgaben = aufgaben.filter((aufgabe) => aufgabe.done === true)\n\n  function handleRemove(id) {\n    const newList = auf.filter((item) => item.id !== id);\n\n    setAufgaben(newList);\n  }\n\n  return (\n    <div className='ToDoListe'>\n      <h2>Das sind meine Aufgaben:</h2>\n      <ul>\n        {/* Schritt 2: nur nicht erledigte aufgaben anzeigen */}\n        {nichtErledigteAufgaben.map((aufgabe) => {\n          return <Aufgabe\n            text={aufgabe.text}\n            key={aufgabe.id}\n            number={aufgabe.id}\n            // Schritt 3: onClick um als erledigt zu markieren\n            aufgabeAlsErledigtMarkieren={aufgabeAlsErledigtMarkieren}\n            farbe={aufgabe.farbe}\n            done={aufgabe.done}\n             />\n        })}\n      </ul>\n      <h2>Das habe ich schon erledigt:</h2>\n      {/* Schritt 1: nur erledigte aufgaben anzeigen; Ausfilter wo done == true */}\n      {/*Geht auch: { aufgaben.filter((aufgabe) => aufgabe.done )} */}\n      {/* [{ text: \"Programmieren\", done: true, id: 5, farbe: 'blau' }] */}\n      {erledigteAufgaben.map(aufgabe => {\n        return <Aufgabe\n          text={aufgabe.text}\n          key={aufgabe.id}\n          number={aufgabe.id}\n          // Schritt 3: onClick um als erledigt zu markieren\n          aufgabeAlsErledigtMarkieren={aufgabeAlsErledigtMarkieren}\n          farbe={aufgabe.farbe}\n          done={aufgabe.done}\n           />\n      })}\n\n\n\n\n\n\n      {/* Schritt 4: aufräumen mit Container? */}\n    </div>\n  )\n}\n\nexport default ToDoListe"],"mappings":"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"},"metadata":{},"sourceType":"module"}