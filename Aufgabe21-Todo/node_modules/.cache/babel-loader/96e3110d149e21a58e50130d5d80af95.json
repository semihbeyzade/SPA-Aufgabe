{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/react-todo-student-starter/src/components/ToDoListe.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Aufgabe from \"./Aufgabe\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoListe = () => {\n  _s();\n\n  const [aufgaben, setAufgaben] = useState([{\n    text: \"Einkaufen gehen\",\n    done: false,\n    id: 1,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Eis essen\",\n    done: false,\n    id: 2,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Spielen\",\n    done: false,\n    id: 3,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Schlafen\",\n    done: false,\n    id: 4,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Programmieren\",\n    done: true,\n    id: 5,\n    farbe: \"schwarz\"\n  }, {\n    text: \"Aufstehen\",\n    done: false,\n    id: 6\n  }]); // Funktion um done von false auf true zu ändern:\n  // braucht das Id von Aufgabe\n\n  const aufgabeAlsErledigtMarkieren = id => {\n    // kopie von aufgaben, hier ändern wir\n    let geänderteKopie = aufgaben.map(aufgabe => {\n      // // das element auf dem wir geklickt haben finden!\n      if (aufgabe.id === id) {\n        // done von false zu true\n        aufgabe.done = !aufgabe.done;\n        return aufgabe;\n      } else {\n        return aufgabe;\n      }\n    }); // setAufgaben, um die neue Array in state zu speichern:\n\n    setAufgaben(geänderteKopie);\n  }; // filter funktionen:\n\n\n  let nichtErledigteAufgaben = aufgaben.filter(aufgabe => !aufgabe.done);\n  let erledigteAufgaben = aufgaben.filter(aufgabe => aufgabe.done === true);\n\n  function handleRemove(id) {\n    let newAufgaben = aufgaben.filter(item => item.id !== id);\n    setAufgaben(newAufgaben);\n  }\n\n  function handleEdit(id) {}\n\n  function handleZuruckAlle() {\n    let newAufgaben = aufgaben.map(item => {\n      item.done = false;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleErledigenAlle() {\n    let newAufgaben = aufgaben.map(item => {\n      item.done = true;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleLoeschAlle() {\n    setAufgaben([]);\n  }\n\n  const [userInput, setUserInput] = useState(\"\");\n\n  const handleChange = e => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addTask(userInput);\n    setUserInput(\"\");\n  };\n\n  const addTask = userInput => {\n    let copy = [...aufgaben];\n    copy = [...copy, {\n      id: aufgaben.length + 1,\n      text: userInput,\n      done: false\n    }];\n    setAufgaben(copy);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ToDoListe\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Das sind meine Aufgaben:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleErledigenAlle,\n        children: \"Alle erledigen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZuruckAlle,\n        children: \"Alle zur\\xFCcksetzen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoeschAlle,\n        children: \"Alle l\\xF6schen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nichtErledigteAufgaben.map(aufgabe => {\n        return /*#__PURE__*/_jsxDEV(Aufgabe, {\n          text: aufgabe.text,\n          handleRemove: handleRemove,\n          number: aufgabe.id // Schritt 3: onClick um als erledigt zu markieren\n          ,\n          aufgabeAlsErledigtMarkieren: aufgabeAlsErledigtMarkieren,\n          farbe: aufgabe.farbe,\n          done: aufgabe.done\n        }, aufgabe.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Das habe ich schon erledigt:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), erledigteAufgaben.map(aufgabe => {\n      return /*#__PURE__*/_jsxDEV(Aufgabe, {\n        handleRemove: handleRemove,\n        text: aufgabe.text,\n        number: aufgabe.id // Schritt 3: onClick um als erledigt zu markieren\n        ,\n        aufgabeAlsErledigtMarkieren: aufgabeAlsErledigtMarkieren,\n        farbe: aufgabe.farbe,\n        done: aufgabe.done\n      }, aufgabe.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"add-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: userInput,\n        type: \"text\",\n        onChange: handleChange,\n        placeholder: \"Add Aufgabe...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"ADD-AUFGABE++\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToDoListe, \"krbAWltYAzXEHB2dJY3omrxo0Mk=\");\n\n_c = ToDoListe;\nexport default ToDoListe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListe\");","map":{"version":3,"names":["useState","Aufgabe","ToDoListe","aufgaben","setAufgaben","text","done","id","farbe","aufgabeAlsErledigtMarkieren","geänderteKopie","map","aufgabe","nichtErledigteAufgaben","filter","erledigteAufgaben","handleRemove","newAufgaben","item","handleEdit","handleZuruckAlle","handleErledigenAlle","handleLoeschAlle","userInput","setUserInput","handleChange","e","target","value","handleSubmit","preventDefault","addTask","copy","length"],"sources":["/home/user/Desktop/react-todo-student-starter/src/components/ToDoListe.js"],"sourcesContent":["import { useState } from \"react\";\nimport Aufgabe from \"./Aufgabe\";\n\nconst ToDoListe = () => {\n  const [aufgaben, setAufgaben] = useState([\n    { text: \"Einkaufen gehen\", done: false, id: 1, farbe: \"schwarz\" },\n    { text: \"Eis essen\", done: false, id: 2, farbe: \"schwarz\" },\n    { text: \"Spielen\", done: false, id: 3, farbe: \"schwarz\" },\n    { text: \"Schlafen\", done: false, id: 4, farbe: \"schwarz\" },\n    { text: \"Programmieren\", done: true, id: 5, farbe: \"schwarz\" },\n    { text: \"Aufstehen\", done: false, id: 6 },\n  ]);\n  // Funktion um done von false auf true zu ändern:\n  // braucht das Id von Aufgabe\n  const aufgabeAlsErledigtMarkieren = (id) => {\n    // kopie von aufgaben, hier ändern wir\n    let geänderteKopie = aufgaben.map((aufgabe) => {\n      // // das element auf dem wir geklickt haben finden!\n      if (aufgabe.id === id) {\n        // done von false zu true\n        aufgabe.done = !aufgabe.done;\n        return aufgabe;\n      } else {\n        return aufgabe;\n      }\n    });\n    // setAufgaben, um die neue Array in state zu speichern:\n    setAufgaben(geänderteKopie);\n  };\n\n  // filter funktionen:\n\n  let nichtErledigteAufgaben = aufgaben.filter((aufgabe) => !aufgabe.done);\n  let erledigteAufgaben = aufgaben.filter((aufgabe) => aufgabe.done === true);\n\n  function handleRemove(id) {\n    let newAufgaben = aufgaben.filter((item) => item.id !== id);\n    setAufgaben(newAufgaben);\n  }\n  function handleEdit(id){\n    \n  }\n\n  function handleZuruckAlle() {\n    let newAufgaben = aufgaben.map((item) => {\n      item.done = false;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleErledigenAlle() {\n    let newAufgaben = aufgaben.map((item) => {\n      item.done = true;\n      return item;\n    });\n    setAufgaben(newAufgaben);\n  }\n\n  function handleLoeschAlle() {\n    setAufgaben([]);\n  }\n\n  const [userInput, setUserInput] = useState(\"\");\n  const handleChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addTask(userInput);\n    setUserInput(\"\");\n  };\n\n  const addTask = (userInput) => {\n    let copy = [...aufgaben];\n    copy = [...copy, { id: aufgaben.length + 1, text: userInput, done: false }];\n    setAufgaben(copy);\n  };\n\n  return (\n    <div className=\"ToDoListe\">\n      <h2>Das sind meine Aufgaben:</h2>\n      <div>\n        <button onClick={handleErledigenAlle}>Alle erledigen</button>\n        <button onClick={handleZuruckAlle}>Alle zurücksetzen</button>\n        <button onClick={handleLoeschAlle}>Alle löschen</button>\n      </div>\n      <ul>\n        {/* Schritt 2: nur nicht erledigte aufgaben anzeigen */}\n        {nichtErledigteAufgaben.map((aufgabe) => {\n          return (\n            <Aufgabe\n              text={aufgabe.text}\n              key={aufgabe.id}\n              handleRemove={handleRemove}\n              number={aufgabe.id}\n              // Schritt 3: onClick um als erledigt zu markieren\n              aufgabeAlsErledigtMarkieren={aufgabeAlsErledigtMarkieren}\n              farbe={aufgabe.farbe}\n              done={aufgabe.done}\n            />\n          );\n        })}\n      </ul>\n      <h2>Das habe ich schon erledigt:</h2>\n      {/* Schritt 1: nur erledigte aufgaben anzeigen; Ausfilter wo done == true */}\n      {/*Geht auch: { aufgaben.filter((aufgabe) => aufgabe.done )} */}\n      {/* [{ text: \"Programmieren\", done: true, id: 5, farbe: 'blau' }] */}\n      {erledigteAufgaben.map((aufgabe) => {\n        return (\n          <Aufgabe\n            handleRemove={handleRemove}\n            text={aufgabe.text}\n            key={aufgabe.id}\n            number={aufgabe.id}\n            // Schritt 3: onClick um als erledigt zu markieren\n            aufgabeAlsErledigtMarkieren={aufgabeAlsErledigtMarkieren}\n            farbe={aufgabe.farbe}\n            done={aufgabe.done}\n          />\n        );\n      })}\n      <form className=\"add-form\" onSubmit={handleSubmit}>\n        <input\n          value={userInput}\n          type=\"text\"\n          onChange={handleChange}\n          placeholder=\"Add Aufgabe...\"\n        />\n        <button type=\"submit\">ADD-AUFGABE++</button>\n      </form>\n\n      {/* Schritt 4: aufräumen mit Container? */}\n    </div>\n  );\n};\n\nexport default ToDoListe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}